<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
		
<mapper namespace="ChatMapper">
	<resultMap id="chatSelectMap" type="chat">
		<result property="chatNo" column="chat_no" jdbcType="INTEGER"/>
		<result property="chatLeaderId.memberId" column="chat_leader_id" jdbcType="VARCHAR"/>
		<result property="chatRestaurant.restaurantNo" column="restaurant_no" jdbcType="INTEGER"/>
		<result property="chatRestaurant.restaurantName" column="restaurant_name" jdbcType="INTEGER"/>
		<result property="chatRestaurant.streetAddress" column="street_address" jdbcType="INTEGER"/>
		<result property="chatTitle" column="chat_title" jdbcType="VARCHAR"/>
		<result property="chatImage" column="chat_image" jdbcType="VARCHAR"/>
		<result property="chatText" column="chat_text" jdbcType="VARCHAR"/>
		<result property="chatRegDate" column="chat_reg_date" jdbcType="DATE"/>
		<result property="chatGender" column="chat_gender" jdbcType="INTEGER"/>
		<result property="chatMemberCount" column="chat_member_count" jdbcType="INTEGER"/>
		<result property="chatState" column="chat_state" jdbcType="INTEGER"/>
		<result property="chatShowStatus" column="chat_show_status" jdbcType="BOOLEAN"/>
		<result property="chatAge" column="age_type" jdbcType="VARCHAR"/>
		<result property="reportCount" column="report_count" jdbcType="INTEGER"/>
		<result property="readyCount" column="ready_count" jdbcType="INTEGER"/>
		<collection property="chatMember" column="chat_no" javaType="java.util.ArrayList" ofType="chatMember" select="listChatMember">
			<id property="chatMemberNo" column="chat_member_no"/>
			<result property="chatNo" column="chat_no" jdbcType="INTEGER"/>
			<result property="member.memberId" column="chat_member_id" jdbcType="VARCHAR"/>
			<result property="member.nickname" column="nickname" jdbcType="VARCHAR"/>
			<result property="member.gender" column="gender" jdbcType="VARCHAR"/>
			<result property="member.ageRange" column="age_range" jdbcType="VARCHAR"/>
			<result property="member.profileImage" column="profile_image" jdbcType="VARCHAR"/>
			<result property="readyCheck" column="ready_check" jdbcType="BOOLEAN"/>
			<result property="chatLeaderCheck" column="chat_leader_check" jdbcType="BOOLEAN"/>
			<result property="inOutCheck" column="in_out_check" jdbcType="BOOLEAN"/>
			<result property="onConnected" column="on_connected" jdbcType="BOOLEAN"/>
			<result property="forbiddenMember" column="forbidden_member" jdbcType="BOOLEAN"/>
		</collection>
	</resultMap>
	
	<resultMap id="chatMemberSelectMap" type="chatMember">
		<result property="chatNo" column="chat_no" jdbcType="INTEGER"/>
		<result property="member.memberId" column="chat_member_id" jdbcType="VARCHAR"/>
		<result property="member.nickname" column="nickname" jdbcType="VARCHAR"/>
		<result property="member.gender" column="gender" jdbcType="VARCHAR"/>
		<result property="member.ageRange" column="age_range" jdbcType="VARCHAR"/>
		<result property="member.profileImage" column="profile_image" jdbcType="VARCHAR"/>
		<result property="readyCheck" column="ready_check" jdbcType="BOOLEAN"/>
		<result property="chatLeaderCheck" column="chat_leader_check" jdbcType="BOOLEAN"/>
		<result property="inOutCheck" column="in_out_check" jdbcType="BOOLEAN"/>
		<result property="onConnected" column="on_connected" jdbcType="BOOLEAN"/>
		<result property="forbiddenMember" column="forbidden_member" jdbcType="BOOLEAN"/>
	</resultMap>
	
	
	<!-- SQL : INSERT -->
	<insert id="addChat" parameterType="chat" useGeneratedKeys="true" keyProperty="chatNo">
		INSERT INTO chat (
			chat_leader_id, 
			restaurant_no, 
			chat_title,
			<if test="chatImage != null">chat_image,</if>
			<if test="chatText != null">chat_text,</if>
			chat_gender, 
			age_type
		)
		VALUES ( 
			#{chatLeaderId.memberId}, 
			#{chatRestaurant.restaurantNo}, 
			#{chatTitle}, 
			<if test="chatImage != null">#{chatImage},</if>
			<if test="chatText != null">#{chatText},</if>
			#{chatGender}, 
			#{chatAge} 
		)
	</insert>
	
	<!-- SQL : SELECT ONE -->
	<select id="getChat" parameterType="int" resultMap="chatSelectMap">		
		SELECT c.chat_no, c.chat_leader_id, c.restaurant_no, c.chat_title, c.chat_image, c.chat_text, c.chat_reg_date, c.chat_gender, c.chat_state, c.chat_show_status, c.age_type, count(rp.chat_no) report_count, count(*) chat_member_count, (SELECT count(*) from chat_member where chat_no = #{chatNo} AND ready_check = 1) ready_count
		FROM chat c
		LEFT OUTER JOIN report rp ON ( c.chat_no = rp.chat_no)
		LEFT OUTER JOIN chat_member cm ON ( c.chat_no = cm.chat_no AND in_out_check = 1)
		WHERE c.chat_no = #{chatNo}
		GROUP BY c.chat_no;
	</select>
	
	
	<!-- SQL : UPDATE -->
	<update id="updateChat" parameterType="chat">
		UPDATE chat
		<set>
			<if test="chatRestaurant.restaurantNo != null">restaurant_no = #{chatRestaurant.restaurantNo},</if>
			<if test="chatTitle != null">chat_title = #{chatTitle},</if>
			<if test="chatImage != null">chat_image = #{chatImage},</if>
			<if test="chatImage == null">chat_image = 'chatimg.jpg',</if>
			<if test="chatText != null">chat_text = #{chatText},</if>
			<if test="chatGender != null">chat_gender = #{chatGender},</if>
			<if test="chatAge != null">age_type = #{chatAge},</if>
			<if test="chatShowStatus == false">chat_show_status = true</if>
			<if test="chatShowStatus == true">chat_show_status = false</if>
		</set>
		WHERE chat_no = #{chatNo}		
	</update>
	
	<!-- SQL : SELECT ALL -->
	<select id="listChat" parameterType="map" resultMap="chatSelectMap">
		<!-- <bind name="searchKeywords" value="'%' + searchKeyword + '%'" /> -->
		SELECT *
		FROM (SELECT c.chat_no, c.chat_leader_id, c.restaurant_no, c.chat_title, c.chat_image, c.chat_text, c.chat_reg_date, c.chat_gender, c.chat_state, c.chat_show_status, c.age_type, count(rp.chat_no) report_count, r.restaurant_name, ANY_VALUE(cm.chat_member_id)
			FROM chat c
			LEFT OUTER JOIN report rp ON (c.chat_no = rp.chat_no)
			LEFT OUTER JOIN restaurant r ON (c.restaurant_no = r.restaurant_no)
			LEFT OUTER JOIN chat_member cm ON (c.chat_no = cm.chat_no and in_out_check = 1)
			<where>
				<if test="search.searchCondition == 0 and search.searchKeyword !='' ">
				AND UPPER(r.restaurant_name) LIKE CONCAT('%', #{search.searchKeyword}, '%')
				</if>
				<if test="search.searchCondition == 1 and search.searchKeyword !='' ">
				AND UPPER(r.street_address) LIKE CONCAT('%', #{search.searchKeyword}, '%')
				</if>
				<!-- 10대 -->
				<if test="search.searchFilter == 1">
				AND c.age_type LIKE CONCAT('%', 1, '%')
				</if>
				<!-- 20대 -->
				<if test="search.searchFilter == 2">
				AND c.age_type LIKE CONCAT('%', 2, '%')
				</if>
				<!-- 30대 -->
				<if test="search.searchFilter == 3">
				AND c.age_type LIKE CONCAT('%', 3, '%')
				</if>
				<!-- 40대 -->
				<if test="search.searchFilter == 4">
				AND c.age_type LIKE CONCAT('%', 4, '%')
				</if>
				<!-- 50대 -->
				<if test="search.searchFilter == 5">
				AND c.age_type LIKE CONCAT('%', 5, '%')
				</if>
				<!-- 60대 이상 -->
				<if test="search.searchFilter == 6">
				AND c.age_type LIKE CONCAT('%', 6, '%')
				</if>
				<!-- 연령대 무관 -->
				<if test="search.searchFilter == 7">
				AND c.age_type LIKE CONCAT('%', 7, '%')
				</if>
				<!-- 남자 -->
				<if test="search.searchFilter == 8">
				AND c.chat_gender = 1
				</if>
				<!-- 여자 -->
				<if test="search.searchFilter == 9">
				AND c.chat_gender = 2
				</if>
				<!-- 성별 무관 -->
				<if test="search.searchFilter == 10">
				AND c.chat_gender = 3
				</if>
				<!-- 참여중인 채팅방 -->
				<if test="search.searchFilter == 11">
				AND cm.chat_member_id = #{memberId}
				</if>
			</where>
			GROUP BY c.chat_no
			<!-- 신고횟수 5회 이상 -->
			<if test="search.searchFilter == 12">
			HAVING count(rp.chat_no) >= 5
			</if>
			ORDER BY
			<choose>
				<when test="search.searchSort == 'latest'"> c.chat_no DESC LIMIT #{search.startRowNum}, #{search.pageSize}</when >
				<when test="search.searchSort == 'oldest'"> c.chat_no ASC LIMIT #{search.startRowNum}, #{search.pageSize}</when >
				<otherwise> c.chat_no DESC LIMIT #{search.startRowNum}, #{search.pageSize}</otherwise>
			</choose>
		) AS c
	</select>
	
	<!-- SQL : SELECT ROW COUNT -->
	<select id="getTotalCount" parameterType="search" resultType="int">
		SELECT COUNT(*)
		FROM chat c, restaurant r
			<if test="searchCondition != null">
				<where>
					<if test="searchCondition == 0 and searchKeyword !='' ">
					c.restaurant_no = r.restaurant_no
					AND UPPER(r.restaurant_name) LIKE CONCAT('%', #{searchKeyword}, '%')
					</if>
					<if test="searchCondition == 1 and searchKeyword !='' ">
					c.restaurant_no = r.restaurant_no
					AND UPPER(r.street_address) LIKE CONCAT('%', #{searchKeyword}, '%')
					</if>
				</where>
			</if>
	</select>
	
	<!-- SQL : SELECT ONE -->
	<select id="getChatEntrance" parameterType="int" resultMap="chatSelectMap">
		SELECT
		c.chat_no, c.chat_leader_id, c.restaurant_no, c.chat_title, c.chat_image, c.chat_text, c.chat_reg_date, c.chat_gender, c.chat_state, c.chat_show_status, c.age_type, count(*) chat_member_count
		FROM chat c
		LEFT OUTER JOIN chat_member cm ON ( c.chat_no = cm.chat_no )
		WHERE c.chat_no IN (#{chatNo})
	</select>
	
	<!-- SQL : UPDATE -->
	<update id="deleteChat" parameterType="chat">
		UPDATE chat
		<set>
			chat_show_status = #{chatShowStatus}
		</set>
		WHERE chat_no = #{chatNo}		
	</update>
	
	<!-- SQL : UPDATE -->
	<update id="updateChatState" parameterType="chat">
		UPDATE chat
		<set>
			chat_state = #{chatState}
		</set>
		WHERE chat_no = #{chatNo}		
	</update>
	
	<!-- SQL : INSERT -->
	<insert id="addChatMember" parameterType="chatMember">
		INSERT INTO chat_member (
			chat_no, 
			chat_member_id, 
			<if test="readyCheck != null">ready_check,</if>
			<if test="chatLeaderCheck != null">chat_leader_check</if>
		)
		VALUES ( 
			#{chatNo}, 
			#{member.memberId}, 
			<if test="readyCheck != null">#{readyCheck},</if>
			<if test="chatLeaderCheck != null">#{chatLeaderCheck}</if>
		)		
	</insert>
	
	<!-- SQL : SELECT ALL -->
	<select id="listChatMember" parameterType="map" resultMap="chatMemberSelectMap">
		<!-- <bind name="searchKeywords" value="'%' + searchKeyword + '%'" /> -->
		SELECT c.chat_member_no, c.chat_no, c.chat_member_id, c.ready_check, c.chat_leader_check, c.in_out_check, c.on_connected, c.forbidden_member, m.nickname, m.gender, m.age_range, m.profile_image
			FROM chat_member c, member m
			WHERE chat_no = #{chatNo} AND in_out_check = 1 AND c.chat_member_id = m.member_id
			ORDER BY chat_member_no
	</select>
	
	<!-- SQL : SELECT ALL -->
	<select id="listReservationChatMember" parameterType="map" resultMap="chatMemberSelectMap">
		<!-- <bind name="searchKeywords" value="'%' + searchKeyword + '%'" /> -->
		SELECT chat_member_no, chat_no, chat_member_id, ready_check, chat_leader_check, in_out_check
			FROM chat_member
			WHERE chat_no = #{chatNo} AND ready_check = 1 AND in_out_check = 1
	</select>
	
	<!-- SQL : SELECT ONE -->
	<select id="getChatMember" parameterType="map" resultMap="chatMemberSelectMap">		
		SELECT chat_member_no, chat_no, chat_member_id, ready_check, chat_leader_check, in_out_check, on_connected, forbidden_member
		FROM chat_member
		WHERE chat_no = #{chatNo} AND chat_member_id = #{memberId}
	</select>
	
	<!-- SQL : UPDATE -->
	<update id="updateChatMember" parameterType="chatMember">
		UPDATE chat_member
		<set>
			in_out_check = #{inOutCheck}
		</set>
		WHERE chat_member_id = #{member.memberId} AND chat_no = #{chatNo};
	</update>
	
	<!-- SQL : UPDATE -->
	<update id="deleteAllChatMember" parameterType="chatMember">
		UPDATE chat_member
		<set>
			in_out_check = #{inOutCheck}
		</set>
		WHERE chat_no = #{chatNo};
	</update>
	
	<!-- SQL : UPDATE -->
	<update id="deleteChatMember" parameterType="chatMember">
		UPDATE chat_member
		<set>
			in_out_check = #{inOutCheck}
		</set>
		WHERE chat_member_id = #{member.memberId} AND chat_no = #{chatNo};
	</update>
	
	<!-- SQL : update -->
	<delete id="updateReadyCheck" parameterType="chatMember">
		UPDATE chat_member
		<set>
			ready_check = #{readyCheck}
		</set>
		 WHERE chat_member_id = #{member.memberId} AND chat_no = #{chatNo};
	</delete>
	
	<!-- SQL : SELECT ALL -->
	<select id="listReadyCheckMember" parameterType="map" resultMap="chatMemberSelectMap">
		SELECT c.chat_member_no, c.chat_no, c.chat_member_id, m.nickname, c.ready_check, c.chat_leader_check, c.in_out_check 
			FROM chat_member c, member m
			WHERE chat_no = #{chatNo} and c.ready_check = 1 and c.chat_member_id = m.member_id
			ORDER BY chat_member_no
	</select>
	
	<!-- SQL : UPDATE -->
	<update id="updateConnectedChatMember" parameterType="chatMember">
		UPDATE chat_member
		<set>
			on_connected = #{onConnected}
		</set>
		WHERE chat_member_id = #{member.memberId} AND chat_no = #{chatNo};
	</update>
	
	<!-- SQL : UPDATE -->
	<update id="updateGetOutChatMember" parameterType="chatMember">
		UPDATE chat_member
		<set>
			in_out_check = #{inOutCheck},
			forbidden_member = #{forbiddenMember},
			ready_check = #{readyCheck}
		</set>
		WHERE chat_member_id = #{member.memberId} AND chat_no = #{chatNo};
	</update>
	
	
</mapper> 