<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
		
<mapper namespace="ChatMapper">
	<resultMap id="chatSelectMap" type="chat">
		<result property="chatNo" column="chat_no" jdbcType="INTEGER"/>
		<result property="chatLeaderId.memberId" column="chat_leader_id" jdbcType="VARCHAR"/>
		<result property="chatRestaurant.restaurantNo" column="restaurant_no" jdbcType="INTEGER"/>
		<result property="chatTitle" column="chat_title" jdbcType="VARCHAR"/>
		<result property="chatImage" column="chat_image" jdbcType="VARCHAR"/>
		<result property="chatText" column="chat_text" jdbcType="VARCHAR"/>
		<result property="chatRegDate" column="chat_reg_date" jdbcType="DATE"/>
		<result property="chatGender" column="chat_gender" jdbcType="INTEGER"/>
		<result property="chatMemberCount" column="chat_member_count" jdbcType="INTEGER"/>
		<result property="chatState" column="chat_state" jdbcType="INTEGER"/>
		<result property="chatShowStatus" column="chat_show_status" jdbcType="BOOLEAN"/>
		<result property="chatAge" column="age_type" jdbcType="VARCHAR"/>
		<result property="reportCount" column="report_count" jdbcType="INTEGER"/>
	</resultMap>
	
	<resultMap id="chatMemberSelectMap" type="chatMember">
		<result property="chatNo" column="chat_no" jdbcType="INTEGER"/>
		<result property="member.memberId" column="chat_member_id" jdbcType="VARCHAR"/>
		<result property="readyCheck" column="ready_check" jdbcType="BOOLEAN"/>
		<result property="chatLeaderCheck" column="chat_leader_check" jdbcType="BOOLEAN"/>
	</resultMap>
	
	
	<!-- SQL : INSERT -->
	<insert id="addChat" parameterType="chat" useGeneratedKeys="true" keyProperty="chatNo">
		INSERT INTO chat (
			chat_leader_id, 
			restaurant_no, 
			chat_title,
			<if test="chatImage != null">chat_image,</if>
			<if test="chatText != null">chat_text,</if>
			chat_gender, 
			age_type
		)
		VALUES ( 
			#{chatLeaderId.memberId}, 
			#{chatRestaurant.restaurantNo}, 
			#{chatTitle}, 
			<if test="chatImage != null">#{chatImage},</if>
			<if test="chatText != null">#{chatText},</if>
			#{chatGender}, 
			#{chatAge} 
		)
	</insert>
	
	<!-- SQL : SELECT ONE -->
	<select id="getChat" parameterType="int" resultMap="chatSelectMap">
		<!-- SELECT
		chat_no, chat_leader_id, restaurant_no, chat_title, chat_image, chat_text, chat_reg_date, chat_gender, chat_member_count, chat_state, chat_show_status, age_type
		FROM chat
		WHERE chat_no = #{chatNo} -->
		
		SELECT c.chat_no, c.chat_leader_id, c.restaurant_no, c.chat_title, c.chat_image, c.chat_text, c.chat_reg_date, c.chat_gender, c.chat_state, c.chat_show_status, c.age_type, count(rp.chat_no) report_count, count(*) chat_member_count
		FROM chat c
		LEFT OUTER JOIN report rp ON ( c.chat_no = rp.chat_no)
		LEFT OUTER JOIN chat_member cm ON ( c.chat_no = cm.chat_no)
		WHERE c.chat_no = #{chatNo}
		GROUP BY c.chat_no
	</select>
	
	<!-- SQL : UPDATE -->
	<update id="updateChat" parameterType="chat">
		UPDATE chat
		<set>
			<if test="chatRestaurant.restaurantNo != null">restaurant_no = #{chatRestaurant.restaurantNo},</if>
			<if test="chatTitle != null">chat_title = #{chatTitle},</if>
			<if test="chatImage != null">chat_image = #{chatImage},</if>
			<if test="chatText != null">chat_text = #{chatText},</if>
			<if test="chatGender != null">chat_gender = #{chatGender},</if>
			<if test="chatAge != null">age_type = #{chatAge},</if>
			<if test="chatShowStatus != null">chat_show_status = #{chatShowStatus}</if>
		</set>
		WHERE chat_no = #{chatNo}		
	</update>
	
	<!-- SQL : SELECT ALL -->
	<select id="listChat" parameterType="map" resultMap="chatSelectMap">
		<!-- <bind name="searchKeywords" value="'%' + searchKeyword + '%'" /> -->
		<!-- SELECT * 
		FROM ( SELECT c.chat_no, c.chat_title, c.chat_text, c.chat_image, c.chat_state, c.chat_show_status, c.restaurant_no, r.restaurant_name, r.street_address 
				FROM chat c, restaurant r
				WHERE c.restaurant_no = r.restaurant_no
				ORDER BY c.chat_no LIMIT #{search.startRowNum}, #{search.endRowNum}) AS c -->
	SELECT *
	FROM ( SELECT c.chat_no, c.chat_leader_id, c.restaurant_no, c.chat_title, c.chat_image, c.chat_text, c.chat_reg_date, c.chat_gender, c.chat_state, c.chat_show_status, c.age_type, count(rp.chat_no) report_count
		FROM chat c
		LEFT OUTER JOIN report rp ON ( c.chat_no = rp.chat_no)
		GROUP BY c.chat_no
		ORDER BY c.chat_no LIMIT 0, 8) AS c
	</select>
	
	<!-- SQL : SELECT ROW COUNT -->
	<select id="getTotalCount" parameterType="search" resultType="int">
		SELECT count(*)
		FROM chat
	</select>
	<!-- <select id="getTotalCount" parameterType="search" resultType="int">
		<bind name="searchKeywords" value="'%' + _parameter.getSearchKeyword() + '%'" />
		SELECT COUNT(*)
		FROM ( SELECT chat_no, chat_title
			FROM chat
			<if test="searchCondition != null">
				<where>
					<if test="searchCondition == 0 and searchKeyword != '' ">
						UPPER(chat_no) LIKE UPPER(#{searchKeywords})
					</if>
					<if test="searchCondition == 1 and searchKeyword != '' ">
						UPPER(chat_title) LIKE UPPER(#{searchKeywords})
					</if>
					<if test="searchCondition == 2 and searchKeyword != '' ">
						UPPER(chat_title) LIKE UPPER(#{searchKeywords})
					</if>
				</where>
			</if> ) countTable
	</select> -->
	
	<!-- SQL : SELECT ONE -->
	<select id="getChatEntrance" parameterType="int" resultMap="chatSelectMap">
		SELECT
		c.chat_no, c.chat_leader_id, c.restaurant_no, c.chat_title, c.chat_image, c.chat_text, c.chat_reg_date, c.chat_gender, c.chat_state, c.chat_show_status, c.age_type, count(*) chat_member_count
		FROM chat c
		LEFT OUTER JOIN chat_member cm ON ( c.chat_no = cm.chat_no)
		WHERE c.chat_no IN (#{chatNo})
	</select>
	
	<!-- SQL : UPDATE -->
	<update id="deleteChat" parameterType="chat">
		UPDATE chat
		<set>
			chat_show_status = #{chatShowStatus}
		</set>
		WHERE chat_no = #{chatNo}		
	</update>
	
	<!-- SQL : UPDATE -->
	<update id="updateChatState" parameterType="chat">
		UPDATE chat
		<set>
			chat_state = #{chatState}
		</set>
		WHERE chat_no = #{chatNo}		
	</update>
	
	<!-- SQL : INSERT -->
	<insert id="addChatMember" parameterType="chatMember">
		INSERT IGNORE INTO chat_member (
			chat_no, 
			chat_member_id, 
			<if test="readyCheck != null">ready_check,</if>
			<if test="chatLeaderCheck != null">chat_leader_check</if>
		)
		VALUES ( 
			#{chatNo}, 
			#{member.memberId}, 
			<if test="readyCheck != null">#{readyCheck},</if>
			<if test="chatLeaderCheck != null">#{chatLeaderCheck}</if>
		)		
	</insert>
	
	<!-- SQL : SELECT ALL -->
	<select id="listChatMember" parameterType="map" resultMap="chatMemberSelectMap">
		<!-- <bind name="searchKeywords" value="'%' + searchKeyword + '%'" /> -->
		SELECT chat_member_no, chat_no, chat_member_id, ready_check, chat_leader_check 
			FROM chat_member
			WHERE chat_no = #{chatNo}
			ORDER BY chat_member_no
	</select>
	
	<!-- SQL : DELETE -->
	<delete id="deleteChatMember">
		DELETE FROM chat_member WHERE chat_member_id = #{member.memberId} and chat_no = #{chatNo};
	</delete>
	
	<!-- SQL : update -->
	<delete id="updateReadyCheck" parameterType="chatMember">
		UPDATE chat_member
		<set>
			<if test="readyCheck == true">ready_check = TRUE</if>
			<if test="readyCheck == false">ready_check = FALSE</if>
		</set>
		 WHERE chat_member_id = #{member.memberId} AND chat_no = #{chatNo};
	</delete>
	
	<!-- SQL : SELECT ALL -->
	<select id="listReadyCheckMember" parameterType="map" resultMap="chatMemberSelectMap">
		<!-- <bind name="searchKeywords" value="'%' + searchKeyword + '%'" /> -->
		SELECT chat_member_no, chat_no, chat_member_id, ready_check, chat_leader_check 
			FROM chat_member
			WHERE chat_no = #{chatNo} and ready_check = 1
			ORDER BY chat_member_no
	</select>
	
	
	<!--
	SELECT c.chat_no, c.chat_leader_id, c.chat_title, c.chat_image, c.chat_gender, c.chat_state, c.chat_show_status, c.age_type, c.restaurant_no, r.restaurant_name, r.street_address, r.area_address FROM chat c, restaurant r WHERE c.restaurant_no = r.restaurant_no
	
	SELECT * FROM (
		SELECT @ROWNUM := @ROWNUM + 1 AS ROWNUM, c.chat_no, c.chat_leader_id, c.chat_title, c.chat_image, c.chat_gender, c.chat_state, c.chat_show_status, c.age_type, c.restaurant_no, r.restaurant_name, r.street_address, r.area_address FROM chat c, restaurant r, (SELECT @ROWNUM := 0) rn WHERE c.restaurant_no = r.restaurant_no ORDER BY c.chat_reg_date ASC ) SUB ORDER BY ROWNUM DESC;
		
	SELECT *
	FROM (SELECT c.chat_no, c.chat_leader_id, c.chat_title, c.chat_image, c.chat_gender, c.chat_state, c.chat_show_status, c.age_type, c.restaurant_no, r.restaurant_name, r.street_address, r.area_address FROM chat c, restaurant r
			WHERE c.restaurant_no = r.restaurant_no
			ORDER BY c.chat_no LIMIT 0, 8 ) AS c
	
	-->
	
	
	<!-- SELECT * 
		FROM ( SELECT c.chat_no, c.chat_leader_id, c.chat_title, c.chat_image, c.chat_gender, c.chat_state, c.chat_show_status, c.age_type, c.restaurant_no, r.restaurant_name, r.street_address, r.area_address 
				FROM chat c, restaurant r
				LEFT JOIN member m ON c.chat_leader_id = m.member_id 
				WHERE c.restaurant_no = r.restaurant_no
				ORDER BY c.chat_no LIMIT #{search.startRowNum}, #{search.endRowNum}) AS c -->
	
	
	<!-- SELECT (SELECT COUNT(*) FROM chat WHERE chat_no = 1) + (SELECT COUNT(*) FROM chat_member WHERE chat_no = 1) AS cnt;
	
	SELECT (SELECT COUNT(*) FROM chat_member WHERE chat_no = 1) AS cnt; -->
	
	
	<!-- 참여자수 보기 -->
	<!-- SELECT
		c.chat_no, c.chat_leader_id, c.restaurant_no, c.chat_title, c.chat_image, c.chat_text, c.chat_reg_date, c.chat_gender, c.chat_state, c.chat_show_status, c.age_type, count(*) chat_member_count
		FROM chat c
		LEFT OUTER JOIN chat_member cm ON ( c.chat_no = cm.chat_no)
		WHERE c.chat_no IN (1) -->
	
	
	
	<!-- SELECT * 
		FROM ( SELECT c.chat_no, c.chat_title, c.chat_text, c.chat_image, c.chat_state, c.chat_show_status, c.restaurant_no, count(*) report_count
				FROM chat c
				LEFT OUTER JOIN report rp ON ( c.chat_no = rp.chat_no)
				WHERE c.chat_no IN (1)
				ORDER BY c.chat_no LIMIT 0, 8) AS c
	
	SELECT *
	FROM ( SELECT chat_no, chat_title, chat_text, chat_image, chat_state, chat_show_status, restaurant_no, report_count
			FROM chat LEFT OUTER JOIN(SELECT chat_no, count(*) report_count FROM report GROUP BY chat_no) report_count
			ON chat.chat_no = report_count.chat_no) -->
	
	<!-- SELECT c.chat_no, c.chat_title
	FROM chat c
	LEFT OUTER JOIN (SELECT count(*) report_count
						FROM report
						GROUP BY chat_no) AS rp (c.chat_no = rp.chat_no)
	GROUP by c.chat_no;
	
	SELECT *
	FROM ( SELECT c.chat_no, c.chat_leader_id, c.restaurant_no, c.chat_title, c.chat_image, c.chat_text, c.chat_reg_date, c.chat_gender, c.chat_state, c.chat_show_status, c.age_type, count(rp.chat_no) report_count
		FROM chat c
		LEFT OUTER JOIN report rp ON ( c.chat_no = rp.chat_no)
		GROUP BY c.chat_no
		ORDER BY c.chat_no LIMIT 0, 8) AS c
	
	
	SELECT count(chat_no) FROM report; -->
	
	<!-- SELECT c.chat_no, c.chat_leader_id, c.restaurant_no, c.chat_title, c.chat_image, c.chat_text, c.chat_reg_date, c.chat_gender, c.chat_state, c.chat_show_status, c.age_type, count(rp.chat_no) report_count
		FROM chat c
		LEFT OUTER JOIN report rp ON ( c.chat_no = rp.chat_no)
		WHERE c.chat_no = 1
		GROUP BY c.chat_no -->
	
	
	
	
</mapper> 