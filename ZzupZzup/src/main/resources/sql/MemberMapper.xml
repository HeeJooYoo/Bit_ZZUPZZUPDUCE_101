<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="MemberMapper">

<!-- 	<resultMap id="memberSelectMap" type="member">
		<result property="userId" 			column="user_id" 			jdbcType="VARCHAR"/>
		<result property="userName"	column="user_name" 		jdbcType="VARCHAR" />
		<result property="password" 	column="password" 		jdbcType="VARCHAR" />
		<result property="role" 				column="role" 					jdbcType="VARCHAR" />
		<result property="ssn" 				column="ssn" 					jdbcType="VARCHAR" />
		<result property="phone" 			column="cell_phone" 		jdbcType="VARCHAR" />
		<result property="addr" 				column="addr" 					jdbcType="VARCHAR" />
		<result property="email" 			column="email" 				jdbcType="NUMERIC"  />
		<result property="regDate" 		column="reg_date" 			jdbcType="DATE" />
	</resultMap> -->
	<resultMap id="memberSelectMap" type="member">
		<result property="memberId" 			column="MEMBER_ID" 			jdbcType="VARCHAR"/>
		<result property="memberRole"			column="MEMBER_ROLE" 		jdbcType="VARCHAR" />
		<result property="password" 			column="PASSWORD" 			jdbcType="VARCHAR" />
		<result property="memberName" 			column="MEMBER_NAME" 		jdbcType="VARCHAR" />
		<result property="memberPhone" 			column="MEMBER_PHONE" 		jdbcType="VARCHAR" />
		<result property="loginType" 			column="LOGIN_TYPE" 		jdbcType="INTEGER" />
		<result property="regDate" 				column="REG_DATE" 			jdbcType="DATE" />
		<result property="ageRange" 			column="AGE_RANGE" 			jdbcType="VARCHAR"  />
		<result property="birth" 				column="BIRTH_YEAR" 		jdbcType="INTEGER" />
		<result property="gender" 				column="GENDER" 			jdbcType="VARCHAR" />
		<result property="profileImage" 		column="PROFILE_IMAGE" 		jdbcType="VARCHAR" />
		<result property="nickname" 			column="NICKNAME" 			jdbcType="VARCHAR" />
		<result property="statusMessage" 		column="STATUS_MESSAGE" 	jdbcType="VARCHAR" />
		<result property="accumulAllScore" 		column="ACTIVITY_SCORE" 	jdbcType="INTEGER" />
		<result property="mannerAllScore" 		column="MANNER_SCORE" 		jdbcType="INTEGER" />
		<result property="deleteDate" 			column="DELETE_DATE" 		jdbcType="DATE" />
		<result property="deleteType" 			column="DELETE_TYPE" 		jdbcType="INTEGER" />
		<result property="deleteReason" 		column="DELETE_DETAIL" 		jdbcType="VARCHAR" />
		<result property="blacklistDate" 		column="BLACKLIST_REG_DATE" jdbcType="DATE" />
		<result property="reportCount" 			column="COUNT_REPORT" 		jdbcType="INTEGER" />
		<result property="regRestaurantCount" 	column="COUNT_RESTAURANT" 	jdbcType="INTEGER" />
		<result property="accumulType" 			column="ACCUMULATE_TYPE" 	jdbcType="INTEGER" />
		<result property="accumulScore" 		column="ACCUMULATE_SCORE" 	jdbcType="INTEGER" />
		<result property="accumulDate" 			column="ACCUMULATE_DATE" 	jdbcType="INTEGER" />
	</resultMap>
	
	<!-- SQL : INSERT -->
	<insert 	id="addMember"	parameterType="member">
		INSERT INTO
		zzupzzup.MEMBER(MEMBER_ID, MEMBER_ROLE, PASSWORD, MEMBER_NAME, MEMBER_PHONE, LOGIN_TYPE, AGE_RANGE, GENDER, PROFILE_IMAGE, NICKNAME, STATUS_MESSAGE, REG_DATE)
		VALUES(#{memberId}, #{memberRole}, #{password}, #{memberName}, #{memberPhone}, #{loginType}, #{ageRange}, #{gender}, #{profileImage}, #{nickname}, #{statusMessage}, NOW())
	</insert>
	
	<!-- SQL : SELECT -->
	<select 	id="getMember"	parameterType="member" resultMap="memberSelectMap">
		SELECT
		MEMBER_ID, PASSWORD, MEMBER_NAME, NICKNAME, MEMBER_ROLE, MEMBER_PHONE, AGE_RANGE, GENDER, PROFILE_IMAGE, NICKNAME, STATUS_MESSAGE, ACTIVITY_SCORE, MANNER_SCORE, LOGIN_TYPE, REG_DATE, DELETE_DATE, DELETE_TYPE, BLACKLIST_REG_DATE
		FROM zzupzzup.MEMBER
		WHERE MEMBER_ID LIKE #{memberId} OR NICKNAME LIKE #{nickname};
	</select>
	
	<select 	id="getOwner"	parameterType="string" resultMap="memberSelectMap">
		SELECT 
		zzupzzup_test.RESTAURANT.MEMBER_ID, zzupzzup_test.RESTAURANT.RESTAURANT_NAME, zzupzzup_test.RESTAURANT.JUDGE_STATUS, zzupzzup_test.RESTAURANT.RESTAURANT_REG_DATE, zzupzzup_test.RESTAURANT.REQUEST_DATE, zzupzzup_test.RESTAURANT.JUDGE_DATE
		FROM zzupzzup_test.RESTAURANT
		LEFT JOIN zzupzzup_test.MEMBER
		ON zzupzzup_test.RESTAURANT.MEMBER_ID = zzupzzup_test.MEMBER.MEMBER_ID AND zzupzzup_test.MEMBER.MEMBER_ROLE = 'owner' AND zzupzzup_test.MEMBER.MEMBER_ID = #{memberId}
	</select>
	
	<!-- SQL : UPDATE -->
	<update 	id="updateMember"	parameterType="member">
		UPDATE zzupzzup.MEMBER
		<set>
			PASSWORD = #{password},
			GENDER = #{gender},
			AGE_RANGE = #{ageRange},
			MEMBER_PHONE = #{memberPhone},
			PROFILE_IMAGE = #{profileImage},
			STATUS_MESSAGE = #{statusMessage},
			BLACKLIST_REG_DATE =
			<if test="regBlacklist">
				NOW()
			</if>
			<if test="!regBlacklist">
				NULL
			</if>
			<if test="deleteDate != '' and deleteType != '' and deleteReason != ''">
				, DELETE_DATE = #{deleteDate},
				DELETE_TYPE = #{deleteType},
				DELETE_DETAIL = #{deleteReason}
			</if>
		</set>
		WHERE MEMBER_ID = #{memberId}
	</update>

	<!-- SQL : SELECT LIST -->
	<select 	id="listUser"	parameterType="map" resultMap="memberSelectMap">
		SELECT MEMBER_LIST.*
		FROM (
			SELECT MEMBER_ROLE, MEMBER_NAME, NICKNAME, COUNT_REP.*, REG_DATE, DELETE_DATE, BLACKLIST_REG_DATE
			FROM zzupzzup.MEMBER
		    RIGHT JOIN (
					SELECT zzupzzup.MEMBER.MEMBER_ID, COUNT(CHAT_MEMBER_ID) AS COUNT_REPORT
					FROM zzupzzup.REPORT RIGHT JOIN zzupzzup.MEMBER
					ON zzupzzup.REPORT.CHAT_MEMBER_ID = zzupzzup.MEMBER.MEMBER_ID
					GROUP BY zzupzzup.MEMBER.MEMBER_ID
				) COUNT_REP
			ON COUNT_REP.MEMBER_ID = zzupzzup.MEMBER.MEMBER_ID
		) MEMBER_LIST
		WHERE MEMBER_ROLE = 'user'
		ORDER BY MEMBER_LIST.MEMBER_ID LIMIT #{search.startRowNum}, #{search.pageSize}
	</select>
	
	<select 	id="listOwner"	parameterType="map" resultMap="memberSelectMap">
		SELECT MEMBER_LIST.*
		FROM (
			SELECT MEMBER_ROLE, MEMBER_NAME, COUNT_RES.*, REG_DATE, DELETE_DATE, BLACKLIST_REG_DATE
			FROM zzupzzup.MEMBER
		    RIGHT JOIN (
					SELECT zzupzzup.MEMBER.MEMBER_ID, COUNT(RESTAURANT_NAME) AS COUNT_RESTAURANT
					FROM zzupzzup.RESTAURANT RIGHT JOIN zzupzzup.MEMBER
					ON zzupzzup.RESTAURANT.MEMBER_ID = zzupzzup.MEMBER.MEMBER_ID
					GROUP BY zzupzzup.MEMBER.MEMBER_ID
				) COUNT_RES
			ON COUNT_RES.MEMBER_ID = zzupzzup.MEMBER.MEMBER_ID
		) MEMBER_LIST
		WHERE MEMBER_ROLE = 'owner'
		ORDER BY MEMBER_LIST.MEMBER_ID LIMIT #{search.startRowNum}, #{search.pageSize}
	</select>
	
	<!-- 
	<select id="getReportCount" parameterType="string" resultType="int">
		SELECT COUNT(CHAT_MEMBER_ID) AS COUNT_REPORT
		FROM zzupzzup_test.REPORT, zzupzzup_test.MEMBER
		WHERE zzupzzup_test.MEMBER.MEMBER_ROLE = 'user' AND zzupzzup_test.REPORT.CHAT_MEMBER_ID = zzupzzup_test.MEMBER.MEMBER_ID AND zzupzzup_test.MEMBER.MEMBER_ID = #{memberId}
	</select>
	
	<select id="getRegRestaurantCount" parameterType="string" resultType="int">
		SELECT COUNT(RESTAURANT_NO) AS COUNT_RESTAURANT
		FROM zzupzzup_test.RESTAURANT, zzupzzup_test.MEMBER
		WHERE zzupzzup_test.MEMBER.MEMBER_ROLE = 'owner' AND zzupzzup_test.RESTAURANT.MEMBER_ID = zzupzzup_test.MEMBER.MEMBER_ID AND zzupzzup_test.MEMBER.MEMBER_ID = #{memberId}
	</select>

	<update 	id="updateOwner"	parameterType="member">
		UPDATE zzupzzup_test.MEMBER
		<set>
			PASSWORD = #{password},
			MEMBER_PHONE = #{memberPhone},
			PROFILE_IMAGE = #{profileImage}
		</set>
		WHERE MEMBER_ID = #{memberId} AND MEMBER_ROLE = 'owner'
	</update> -->
	
	<!-- ACTIVITY_SCORE -->
	<insert id="addActivityScore" parameterType="map">
		INSERT INTO zzupzzup.ACTIVITY_SCORE(MEMBER_ID, ACCUMULATE_TYPE, ACCUMULATE_SCORE)
		VALUES(#{memberId}, #{accumulType}, #{accumulScore})
	</insert>
	
	<select id="listActivityScore" parameterType="string" resultMap="memberSelectMap">
		SELECT ACCUMULATE_TYPE, ACCUMULATE_SCORE, ACCUMULATE_DATE
		FROM zzupzzup.ACTIVITY_SCORE, zzupzzup.MEMBER
		WHERE zzupzzup.ACTIVITY_SCORE.MEMBER_ID = zzupzzup.MEMBER.MEMBER_ID AND zzupzzup.MEMBER.MEMBER_ID = #{memberId}
	</select>
	
	<update 	id="updateActivityAllScore"	parameterType="string">
		UPDATE zzupzzup.MEMBER
		INNER JOIN (
		SELECT zzupzzup.MEMBER.MEMBER_ID, SUM(zzupzzup.ACTIVITY_SCORE.ACCUMULATE_SCORE) AS ACTIVITY_SCORE
		FROM zzupzzup.ACTIVITY_SCORE, zzupzzup.MEMBER
		WHERE zzupzzup.MEMBER.MEMBER_ID = #{memberId}
		GROUP BY zzupzzup.ACTIVITY_SCORE.MEMBER_ID
		) MEMBER_INFO
		ON zzupzzup.MEMBER.MEMBER_ID = MEMBER_INFO.MEMBER_ID
		SET zzupzzup.MEMBER.ACTIVITY_SCORE = MEMBER_INFO.ACTIVITY_SCORE
		WHERE zzupzzup.MEMBER.MEMBER_ID = #{memberId};
	</update>
	
	 
	<!-- MANNER_SCORE -->
	<update id="updateMannerScore" parameterType="map">
		UPDATE zzupzzup.MEMBER
		SET MANNER_SCORE = MANNER_SCORE + #{accumulScore} WHERE MEMBER_ID = #{memberId};
	</update>
	
	<!-- page count -->
	<select id="getTotalCount" parameterType="search" resultType="int">
		SELECT COUNT(*)
		FROM zzupzzup.MEMBER
		<!-- <choose>
			<when test="restaurantNo != null">
		  		WHERE restaurant_no = #{restaurantNo}
		  	</when>
		  	<otherwise>
		  		<if test="memberId != null">
		  			WHERE member_id = #{memberId}
		  		</if>
		  	</otherwise>
		</choose> --> 
	</select>
	
</mapper>