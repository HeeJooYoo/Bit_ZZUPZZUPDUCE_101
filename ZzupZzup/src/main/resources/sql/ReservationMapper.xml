<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ReservationMapper">

	<resultMap id="reservationSelectMap" type="reservation">
		<result property="reservationNo"   						column="reservation_no" 			jdbcType="INTEGER"/>
		<result property="reservationNumber"   					column="reservation_number" 		jdbcType="VARCHAR"/>
		<result property="restaurant.restaurantNo"   			column="restaurant_no" 				jdbcType="INTEGER"/>
		<result property="chat.chatNo"   						column="chat_no" 					jdbcType="INTEGER"/>
		<result property="member.memberId"   					column="booker_id" 					jdbcType="VARCHAR"/>
		<result property="planDate"   							column="plan_date" 					jdbcType="DATE"/>
		<result property="planTime"   							column="plan_time" 					jdbcType="VARCHAR"/>
		<result property="fixedDate"   							column="fixed_date" 				jdbcType="DATE"/>
		<result property="memberCount"   						column="member_count" 				jdbcType="INTEGER"/>
		<result property="reservationStatus"   					column="reservation_status" 		jdbcType="INTEGER"/>
		<result property="fixedStatus"   						column="fixed_status" 				jdbcType="BOOLEAN"/>
		<result property="reservationDate"   					column="reservation_date" 			jdbcType="DATE"/>
		<result property="totalPrice"   						column="total_price" 				jdbcType="INTEGER"/>
		<result property="payOption"   							column="pay_option" 				jdbcType="INTEGER"/>
		<result property="payMethod"   							column="pay_method" 				jdbcType="INTEGER"/>
		<result property="reservationCancelDate"   				column="cancel_date" 				jdbcType="DATE"/>
		<result property="reservationCancelReason"   			column="reservation_cancel_type" 	jdbcType="INTEGER"/>
		<result property="reservationCancelDetail"   			column="reservation_cancel_detail" 	jdbcType="VARCHAR"/>
		<result property="refundStatus"   						column="refund_status" 				jdbcType="BOOLEAN"/>
		
		<collection property="order" resultMap="orderSelectMap"/>		
	</resultMap>
	
	<resultMap id="orderSelectMap" type="order">
		<id property="orderNo"   							column="order_no" 					jdbcType="INTEGER"/>
		<result property="menuTitle"   							column="menu_title" 				jdbcType="VARCHAR"/>
		<result property="orderCount"   						column="order_count" 				jdbcType="INTEGER"/>
		<result property="menuPrice"   							column="menu_price" 				jdbcType="INTEGER"/>
	</resultMap>
	
	
	
	<!-- SQL : INSERT -->
	<insert id="addReservation"	parameterType="reservation" useGeneratedKeys="true" keyProperty="reservationNo">
	 	INSERT
		INTO RESERVATION(reservation_number, restaurant_no, chat_no, booker_id, plan_date, plan_time, member_count, reservation_status, fixed_status, 
						reservation_date, total_price, pay_option, pay_method, reservation_cancel_type, 
						reservation_cancel_detail, refund_status)
		VALUES (CONCAT(DATE_FORMAT(NOW(), "%Y%m%e%H%i%S"),'_',FLOOR(RAND()*1000000000)), #{restaurant.restaurantNo}, #{chat.chatNo}, 
				#{member.memberId}, #{planDate}, #{planTime},#{memberCount}, 
				#{reservationStatus}, #{fixedStatus}, NOW(), #{totalPrice}, #{payOption}, #{payMethod},
				#{reservationCancelReason}, #{reservationCancelDetail}, #{refundStatus});

	</insert>
		
	<insert id="addOrder" parameterType="reservation">
	 	INSERT
		INTO RESERVATION_ORDER(reservation_no, menu_title, order_count, menu_price)
		VALUES 
		<foreach collection="order" item="item" separator=",">
			(#{reservationNo}, #{item.menuTitle}, #{item.orderCount}, #{item.menuPrice})
		</foreach>

	</insert>
	
	
	
	<!-- SQL : SELECT ONE -->
	<!-- ===========상세 목록 조회====== -->
	<select id="getReservation"	parameterType="int"	resultMap="reservationSelectMap">
		SELECT * 
			FROM RESERVATION AS r
			LEFT OUTER JOIN (SELECT c.chat_no, cm.chat_member_id, m.nickname
							 FROM chat c, chat_member cm right OUTER JOIN (SELECT member_id, NICKNAME FROM member ) as m on (cm.CHAT_MEMBER_ID = m.member_id)
			                 WHERE c.chat_no = cm.chat_no) AS ch ON (r.chat_no = ch.chat_no)
			LEFT OUTER JOIN reservation_order AS ro ON (r.reservation_no = ro.reservation_no)
			WHERE r.reservation_no = #{reservationNo}
	 </select>
	 
	 
	 
	 <!-- =========관리자======== -->
	
	<select id="listReservation"	parameterType="map"	resultMap="reservationSelectMap">
		
		SELECT r.reservation_no, r.RESERVATION_NUMBER, r.CHAT_NO, r.RESTAURANT_NO, r.PLAN_DATE, r.FIXED_DATE, r.PAY_OPTION, r.RESERVATION_STATUS, ch.nickname, ch.CHAT_MEMBER_ID
			FROM RESERVATION AS r
			LEFT OUTER JOIN (SELECT c.chat_no, cm.chat_member_id, m.nickname
							 FROM chat c, chat_member cm right OUTER JOIN (SELECT member_id, NICKNAME FROM member ) as m on (cm.CHAT_MEMBER_ID = m.member_id)
			                 WHERE c.chat_no = cm.chat_no) AS ch ON (r.chat_no = ch.chat_no)
			LEFT OUTER JOIN reservation_order AS ro ON (r.reservation_no = ro.reservation_no)
			ORDER BY RESERVATION_NO LIMIT #{search.startRowNum}, #{search.pageSize}		
	 </select>
	
	 <!-- =========유저,업주======== -->
	 <select id="listMyReservation"	parameterType="map"	resultMap="reservationSelectMap">
		
		SELECT r.reservation_no, r.RESERVATION_NUMBER, r.CHAT_NO, r.RESTAURANT_NO, r.PLAN_DATE, r.FIXED_DATE, r.PAY_OPTION, r.RESERVATION_STATUS, ch.nickname
			FROM RESERVATION AS r
			LEFT OUTER JOIN (SELECT c.chat_no, cm.chat_member_id, m.nickname
							 FROM chat c, chat_member cm right OUTER JOIN (SELECT member_id, NICKNAME FROM member ) as m on (cm.CHAT_MEMBER_ID = m.member_id)
			                 WHERE c.chat_no = cm.chat_no) AS ch ON (r.chat_no = ch.chat_no)
			LEFT OUTER JOIN reservation_order AS ro ON (r.reservation_no = ro.reservation_no)
			<choose>
				<when test="member_role = user">
				WHERE ch.chat_member_id = #{memberId}
				</when>
				<when test="member_role = owner">
				WHERE r.RESTAURANT_NO = #{restaurantNo}
				</when>
			</choose>
			ORDER BY RESERVATION_NO LIMIT #{search.startRowNum}, #{search.pageSize}		
	 </select>
	 
	 
	 
	 <update id="updateReservation" parameterType="reservation">
		UPDATE RESERVATION
	   	<set>
	   		FIXED_DATE = NOW(),
			RESERVATION_STATUS = #{reservationStatus},
           	CANCEL_DATE = NOW(),
            FIXED_STATUS = #{fixedStatus},
            RESERVATION_CANCEL_TYPE = #{reservationCancelReason},
            RESERVATION_CANCEL_DETAIL = #{reservationCancelDetail}
	   	</set>
	   	WHERE reservation_no = #{reservationNo}
	</update>
	 
	 
	 
	 
	 <select id="getTotalCount" parameterType="search" resultType="int">
		SELECT count(*)
		FROM Reservation
	</select>
	 
	 
	 
	 
	 
	 
	 
	 
	
	
</mapper>